openapi: 3.1.0
info:
  title: API сервер для проекта «Что посмотреть».
  description: |-
    * Список ресурсов и маршрутов сервера «Что посмотреть».
  version: 1.0.0
tags:
  - name: users
    description: Действия с пользователями
  - name: movies
    description: Действия с фильмами
  - name: comments
    description: Действия с комментариями

paths:
  /user/register:
    post:
      tags:
        - users
      summary: Создание нового пользователя
      description: Регистрация нового пользователя

      requestBody:
        description: Информация для создания нового пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'

      response:
        "201":
          description: Пользователь зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "409":
          description: Пользователь с таким email уже существует.

  /users/login:
    post:
      tags:
        - users
      summary: Вход в закрытую часть приложения
      description: Авторизует пользователя на основе логина и пароля.

      requestBody:
        required: true
        description: Логин и пароль авторизующегося пользователя.
        content:
          application/json:
            schema:
              type: object

              properties:
                login:
                  type: string
                  example: test@test.com

                password:
                  type: string
                  example: 1234567890

      responses:
        "200":
          description: >
            Успешно авторизован.
            Возвращается JWT Bearer токен для дальнейшего взаимодействия с API
          content:
            application/json:
              schema:
                type: object

                properties:
                  token:
                    type: string
                    format: jwt

        "401":
          description: Пользователь не существует или в паре логин пароль допущены ошибки.

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю.

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      responses:
        "200":
          description: Успешно. Информация о пользователе.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

      "401":
        description: Пользователь не авторизован. Невалидный токен

  /movies/create:
    post:
      tags:
        - movies
      summary: Добавление нового фильма
      description: Добавляет новый фильм.

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      requestBody:
        description: Информация для добавления нового фильма.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createFilm'
        required: true

      responses:
        "201":
          description: Фильм добавлен. Объект фильма.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

        "400":
          description: Не удалось обработать запрос, так как он представлен в неправильном формате или является некорректным.

        "401":
          description: Пользователь не авторизован.

  /movies/{filmId}:
    get:
      tags:
        - movies
      summary: Получение детальной информации по фильму
      description: Получает детальную информацию по определенному фильму.

      parameters:
        - in: path
          name: filmId
          schema:
            type: string
            format: uuid
          required: true
          description: id фильма.

      responses:
        "200":
          description: Успешно. Детальная информация по фильму.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

        "404":
          description: Фильма с данным id не существует.

    patch:
      tags:
        - movies
      summary: Редактирование карточки фильма
      description: Редактирует карточку фильма, созданную пользователем.

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt
        - in: path
          name: filmId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id to update.

      requestBody:
        description: Полный набор информации и идентификатор редактируемого фильма.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateFilm'
        required: true

      responses:
        "200":
          description: Фильм обновлен. Новый объект фильма.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

        "400":
          description: Не удалось обработать запрос, так как он представлен в неправильном формате или является некорректным.

        "401":
          description: Пользователь не авторизован.

        "403":
          description: У пользователь, редактирующего карточку фильма, нет прав на редактирование.

        "404":
          description: Фильма с данным id не существует.

    delete:
      tags:
        - movies
      summary: Удаление карточки фильма
      description: Удаляет карточку фильма, созданную пользователем

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt
        - in: path
          name: filmId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id to delete.

      requestBody:
        description: Id пользователя, пытающегося удалить фильм.
        content:
          application/json:
            schema:
              type: object

              properties:
                userId:
                  type: string
                  format: uuid

      responses:
        "204":
          description: Фильм успешно удален.

        "401":
          description: Пользователь не авторизован.

        "403":
          description: Пользователю запрещено удаление данного фильма.

        "404":
          description: Фильма с данным id не существует.

  /movies?limit=60&genre=horror:
    get:
      tags:
        - movies
      summary: Получение списка фильмов
      description: Возвращает список фильмов (по умолчанию не больше 60).

      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
        - in: query
          name: genre
          schema:
            type: string
            enum: [ comedy, crime, documentary, drama, horror, family, romance, scifi, thriller ]
            example: comedy

      responses:
        "200":
          description: Успешно. Список фильмов.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movieListItem'

        "400":
          description: Не удалось обработать запрос, так как он представлен в неправильном формате или является некорректным.

  /movies/promo:
    get:
      tags:
        - movies
      summary: Получение промо-фильма
      description: Получение детальной информации по промо фильму.

      responses:
        "200":
          description: Успешно. Детальная информация по промо фильму.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

  /users/to_watch:
    get:
      tags:
        - users
      summary: Получить список фильмов «К просмотру»
      description: Возвращает список фильмов, добавленных к просмотру

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      responses:
        "200":
          description: Успешно. Фильмы, добавленные к просмотру.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movieListItem'

        "401":
          description: Пользователь не авторизован.


    post:
      tags:
        - users
      summary: Добавить фильм в список "К просмотру"
      description: Добавляет фильм в список "К просмотру"

      requestBody:
        description: Id фильма, который необходимо добавить из списка "К просмотру"
        content:
          application/json:
            schema:
              type: object

              properties:
                filmId:
                  type: string
                  format: uuid
                  example: 63bb49782c331a1be79c2536

              required:
                - filmId

      responses:
        "201":
          description: Успешно. Фильм добавлен в список "К просмотру".

        "401":
          description: Пользователь не авторизован.


    delete:
      tags:
        - users
      summary: Удалить фильм из списка "К просмотру"
      description: Удаляет фильм из списка "К просмотру"

      requestBody:
        description: Id фильма, который необходимо убрать из списка "К просмотру"
        content:
          application/json:
            schema:
              type: object

              properties:
                filmId:
                  type: string
                  format: uuid
                  example: 63bb49782c331a1be79c2536

              required:
                - filmId

      responses:
        "204":
          description: Успешно. Фильм удален из списка "К просмотру".

        "401":
          description: Пользователь не авторизован.


  /movies/{filmId}/comments:
    get:
      tags:
        - comments
      summary: Получить список комментариев для определённого фильма
      description: Возвращает список комментариев для определенного фильма.

      parameters:
        - in: path
          name: filmId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id to get comments.

      responses:
        "200":
          description: Успешно. Список комментариев к фильму.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'

        "404":
          description: Фильм с таким id не существует.


  /comments:
    post:
      tags:
        - comments
      summary: Добавить новый комментарий к определённому фильму
      description: Добавляет новый комментарий к определенному фильму

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      requestBody:
        description: Id фильма, к которому добавляют комментарий, и сам комментарий
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/comment'
                - type: object
                  properties:
                    filmId:
                      type: string
                      format: uuid
                      example: 63bb49782c331a1be79c2536
                  required:
                    - filmId

      responses:
        "200":
          description: Успешно. Комментарий добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'

        "400":
          description: Не удалось обработать запрос, так как он представлен в неправильном формате или является некорректным

        "401":
          description: Пользователь не авторизован.

        "404":
          description: Фильм с данным id не найден

components:
  schemas:
    createUser:
      type: object

      properties:
        email:
          type: string
          example: test@test.com

        name:
          type: string
          example: John

        password:
          type: string
          example: 1234567890

    user:
      type: object

      properties:
        id:
          type: string
          format: uuid
          example: 63bb49782c331a1be79c2536

        email:
          type: string
          example: test@test.com


    createFilm:
      type: object

      properties:
        title:
          type: string
          minLength: 2
          maxLength: 100
          example: Голодные игры

        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Деспотичное государство ежегодно устраивает показательные игры на выживание, за которыми в прямом эфире следит весь мир.

        publishingDate:
          type: string
          format: date-time
          example: 2022-10-21T22:55:33.903Z

        genre:
          type: string
          enum: [ comedy, crime, documentary, drama, horror, family, romance, scifi, thriller ]
          example: comedy

        releaseYear:
          type: integer
          minimum: 1895
          maximum: 2022
          example: 2013

        previewPath:
          type: string
          format: url
          example: https://www.what-to-watch.ru/hunger_games_preview

        moviePath:
          type: string
          format: url
          example: https://www.what-to-watch.ru/hunger_games

        actors:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          example: [ Дженнифер Лоуренс, Джош Хатчерсон, Лиам Хемсворт ]

        director:
          type: string
          minLength: 2
          maxLength: 50
          example: Гэри Росс

        durationInMinutes:
          type: number
          minimum: 0.1

        userId:
          type: string
          format: uuid
          example: 63bb49782c331a1be79c2536

        posterPath:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: hunger_games_poster.jpg

        backgroundImagePath:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: hunger_games_bg.jpg

        backgroundColor:
          type: string
          example: green

      required:
        - title
        - description
        - publishingDate
        - genre
        - releaseYear
        - previewPath
        - moviePath
        - actors
        - director
        - durationInMinutes
        - userId
        - posterPath
        - backgroundImagePath
        - backgroundColor

    movie:
      type: object

      properties:
        title:
          type: string
          minLength: 2
          maxLength: 100
          example: Голодные игры

        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Деспотичное государство ежегодно устраивает показательные игры на выживание, за которыми в прямом эфире следит весь мир.

        publishingDate:
          type: string
          format: date-time
          example: 2022-11-28T21:33:44.102Z

        genre:
          type: string
          enum: [ comedy, crime, documentary, drama, horror, family, romance, scifi, thriller ]
          example: comedy

        releaseYear:
          type: integer
          minimum: 1895
          maximum: 2022
          example: 2013

        rating:
          type: integer
          minimum: 0
          maximum: 10
          example: 5

        previewPath:
          type: string
          format: url
          example: https://www.what-to-watch.ru/hunger_games_preview

        moviePath:
          type: string
          format: url
          example: https://www.what-to-watch.ru/hunger_games

        actors:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          example: [ Дженнифер Лоуренс, Джош Хатчерсон, Лиам Хемсворт ]

        director:
          type: string
          minLength: 2
          maxLength: 50
          example: Гэри Росс

        durationInMinutes:
          type: number
          minimum: 0.1
          example: 60

        commentsCount:
          type: integer
          minimum: 0
          example: 10

        user:
          $ref: '#/components/schemas/user'

        posterPath:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: hunger_games_poster.jpg

        backgroundImagePath:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: hunger_games_bg.jpg

        backgroundColor:
          type: string
          example: green

      required:
        - title
        - description
        - publishingDate
        - genre
        - releaseYear
        - rating
        - previewPath
        - moviePath
        - actors
        - director
        - durationInMinutes
        - commentsCount
        - user
        - posterPath
        - backgroundImagePath
        - backgroundColor

    updateFilm:
      allOf:
        - $ref: '#/components/schemas/createFilm'
        - type: object
          properties:
            filmId:
              type: string
              format: uuid
              example: 63bb49782c331a1be79c2536
          required:
            - filmId


    movieListItem:
      type: object

      properties:
        title:
          type: string
          minLength: 2
          maxLength: 100
          example: Голодные игры

        publishingDate:
          type: string
          format: date-time
          example: 2022-11-28T21:33:44.102Z

        genre:
          type: string
          enum: [ comedy, crime, documentary, drama, horror, family, romance, scifi, thriller ]
          example: comedy

        previewPath:
          type: string
          format: url
          example: https://www.what-to-watch.ru/hunger_games_preview

        user:
          $ref: '#/components/schemas/user'

        posterPath:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: hunger_games_poster.jpg

        commentsCount:
          type: integer
          minimum: 0
          example: 10

      required:
        - title
        - publishingDate
        - genre
        - previewPath
        - user
        - posterPath
        - commentsCount


    comment:
      type: object

      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
          example: Супер крутой фильм!

        rating:
          type: integer
          minimum: 0
          maximum: 10
          example: 10

        publishingDate:
          type: string
          format: date-time
          example: 2022-10-21T22:55:33.903Z

        user:
          $ref: '#/components/schemas/user'

      required:
        - text
        - rating
        - user
